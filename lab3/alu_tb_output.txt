VCD info: dumpfile alu.vcd opened for output.
                   0 === TESTING ARITHMETIC BLOCK ===
                  10 A=0000 | B=0000 | COE=0 | OUT=0000 | COUT=0 | VOUT=0
                  20 
                  20 SIGNED ADDITION (ALU_code=00000)
                  20 A=0000 | B=0001 | COE=0 | OUT=0001 | COUT=0 | VOUT=0
                  30 A=0005 | B=0005 | COE=0 | OUT=000a | COUT=0 | VOUT=0
                  40 A=ffff | B=ffff | COE=0 | OUT=ffff | COUT=1 | VOUT=0
                  50 
                  50 UNSIGNED ADDITION (ALU_code=00001)
                  50 A=0001 | B=0001 | COE=0 | OUT=0002 | COUT=0 | VOUT=0
                  60 A=0055 | B=a5a5 | COE=0 | OUT=a5fa | COUT=0 | VOUT=0
                  60 
                  70 SIGNED SUBTRACTION (ALU_code=00010)
                  80 A=0008 | B=0004 | COE=0 | OUT=0004 | COUT=1 | VOUT=0
                  90 A=000a | B=0004 | COE=0 | OUT=0006 | COUT=1 | VOUT=0
                  90 
                 100 UNSIGNED SUBTRACTION (ALU_code=00011)
                 110 A=ffff | B=a5a5 | COE=0 | OUT=5a5a | COUT=1 | VOUT=1
                 120 A=000a | B=0004 | COE=0 | OUT=0006 | COUT=1 | VOUT=1
                 120 
                 130 INCREMENT (ALU_code=00100)
                 140 A=0001 | B=0000 | COE=0 | OUT=0002 | COUT=0 | VOUT=1
                 150 A=000f | B=0000 | COE=0 | OUT=0010 | COUT=0 | VOUT=0
                 150 
                 160 DECREMENT (ALU_code=00101)
                 170 A=0002 | B=0000 | COE=0 | OUT=0001 | COUT=1 | VOUT=0
                 180 A=0010 | B=0000 | COE=0 | OUT=000f | COUT=1 | VOUT=1
                 180 
                 180 
                 180 === TESTING LOGIC BLOCK ===
                 190 
                 190 AND (ALU_code=01000)
                 200 1111111100000000 & 1111000011110000 = 1111000000000000
                 210 
                 210 OR (ALU_code=01001)
                 220 1111111100000000 | 1111000011110000 = 1111111111110000
                 230 
                 230 XOR (ALU_code=01010)
                 240 1111111100000000 XOR 1111000011110000 = 0000111111110000
                 250 
                 250 NOT (ALU_code=01100)
                 260 ~1111111100000000 = 0000000011111111
                 260 
                 260 
                 260 === TESTING SHIFTER BLOCK ===
                 270 
                 270 LOGIC LEFT SHIFT (ALU_code=10000)
                 280 0000000001010101 <<      8 = 0101010100000000
                 290 
                 290 LOGIC RIGHT SHIFT (ALU_code=10001)
                 300 1010101000000000 >>>      8 = 0000000010101010
                 310 
                 310 ARITHMETIC LEFT SHIFT (ALU_code=10010)
                 320 0000000001010101 <<      8 = 0101010100000000
                 330 
                 330 ARITHMETIC RIGHT SHIFT (ALU_code=10011)
                 340 1010101000000000 >>      8 = 1111111110101010
                 340 
                 340 
                 340 === TESTING CONIDTIONAL BLOCK ===
                 340 
                 340 ALU_CODE |  A  |  B  |  RESULT
                 345    11000 |   1 |   2 |   1
                 350    11000 |   1 |   0 |   0
                 355    11001 |   2 |   1 |   0
                 360    11001 |  -1 |   1 |   1
                 365    11010 |   1 |   1 |   1
                 370    11010 |  -1 |   1 |   0
                 375    11011 |   2 |   1 |   1
                 380    11011 |  -1 |   1 |   0
                 385    11100 |   1 |   1 |   1
                 390    11100 |  -1 |   1 |   0
                 395    11101 |   1 |   1 |   0
                 400    11101 |  -1 |   1 |   1
                 400 << DONE >>
